#!/usr/bin/env python
# encoding: utf-8
#
# Copyright Â© 2015-2019 Martin Tournoij <martin@arp242.net>
# See below for full copyright
#
# https://github.com/arp242/pkg_clearleaves
#
# Inspired by: http://www.freshports.org/ports-mgmt/pkg_clearleaves/
#

from __future__ import print_function
import argparse
import os
import re
import subprocess
import sys
import tempfile

import distro

# In Python 2 input() evals code
input = getattr(__builtins__, 'raw_input', input)


class System(object):
    """ Base class for all systems """

    def load_exclude(self, exclude_path):
        """ Read exclude file; usually, this default should be okay, unless your
        system has other conventions for storing system-wide config files """

        if exclude_path == 'NONE':
            return

        if exclude_path is not None and not os.path.exists(exclude_path):
            print("error: exclude file '{}' doesn't exist".format(exclude_path),
                  file=sys.stderr)
            sys.exit(1)

        files = [
            (exclude_path or ''),
            '/etc/pkg_leaves.exclude',
            '/usr/local/etc/pkg_leaves.exclude',
            '/usr/pkg/etc/pkg_leaves.exclude',
            './pkg_leaves.exclude',
        ]

        self.exclude = []
        for f in files:
            if not os.path.exists(f):
                continue
            self.exclude = [l.strip() for l in open(f, 'r').readlines()]
            break

    def run(self, cmd):
        """ Run a command; this default should be fine on most systems.
        +cmd+ should be a list acceptable by +subprocess.Popen()+ """
        return subprocess.run(cmd, check=True,
                              stdout=subprocess.PIPE,
                              stderr=subprocess.STDOUT
        ).stdout.decode('utf-8')

    def list_leafs(self):
        """ Get a list of leaf packages; expected return value:
        [
            [pkg_name, display_pkg_name, comment],
            ...
        ]

        The +pkg_name+ is what we will use to remove the package in +remove()+,
        the +display_pkg_name+ is what is displayed to user in the editor,
        together with the +comment+, which should be some description of what
        the package is.
        Note that 2 or more consecutive spaces are removed from any string. """
        pass

    def remove(self, pkgname):
        """ Remove a package; the tool doing the removing should be as verbose
        as possible about this, output isn't shown by default, but we do show
        it when something goes wrong. """
        pass


class Xbps(System):
    """ Void Linux """
    name = 'xbps'

    def remove(self, pkgname):
        self.run(['xbps-remove', '--yes', pkgname])

    def list_leafs(self, optional):
        """
        $ xbps-query -l
        ii xtrans-1.4.0_1                    Network API translation layer to insulate X
        ii xvidcore-1.3.5_1                  ISO MPEG-4 compliant video codec

        $ xbps-query -X vim
        $ xbps-query -X vim-common
        vim-8.1.2238_1
        """
        import xml.etree.ElementTree
        tree = xml.etree.ElementTree.parse('/var/db/xbps/pkgdb-0.38.plist')
        items = list(tree.getroot()[0])

        deps = []
        for n in items:
            if n.tag != 'dict':
                continue

            l = list(n)
            for i, prop in enumerate(l):
                if prop.tag == 'key' and prop.text == 'run_depends':
                    deps.extend([ '-'.join(d.text.replace('>=', '-').split('-')[:-1]) for d in list(l[i + 1]) ])

        orphans = []
        for p in self.run(['xbps-query', '-l']).split('\n'):
            if p == '':
                continue
            _, name, desc = p.split(' ', 2)
            c = '-'.join(name.split('-')[:-1])
            if c not in deps:
                orphans.append([c, name, desc.strip()])

        return orphans


class Pacman(System):
    """ Arch Linux and a few Arch-based distro's """
    name = 'pacman'


    def remove(self, pkgname):
        self.run(['pacman', '--remove', '--noconfirm', '--verbose', pkgname])

    def list_leafs(self, optional):
        """ Example output:

        Name            : lib32-alsa-plugins
        Version         : 1.1.8-1
        Description     : Extra alsa plugins (32-bit)
        Architecture    : x86_64
        URL             : http://www.alsa-project.org
        Licenses        : GPL
        Groups          : None
        Provides        : None
        Depends On      : lib32-alsa-lib  alsa-plugins
        Optional Deps   : lib32-libpulse: PulseAudio plugin [installed]
                        lib32-jack: Jack plugin
                        lib32-libsamplerate: libsamplerate resampling plugin
                        lib32-speex: libspeexdsp resampling plugin
        Required By     : None
        Optional For    : lib32-libpulse
        Conflicts With  : None
        Replaces        : None
        Installed Size  : 222.00 KiB
        Packager        : Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
        Build Date      : Mon 14 Jan 2019 06:52:59 AM NZDT
        Install Date    : Mon 14 Jan 2019 11:26:37 AM NZDT
        Install Reason  : Installed as a dependency for another package
        Install Script  : No
        Validated By    : Signature

        [.. next package ..]
        """

        out = self.run(['pacman', '--query', '--quiet', '--info',
            '--unrequired'] + (['--unrequired'] if optional else []))
        out = out.split('\n')

        def procline(l):
            return ':'.join(l.split(':')[1:]).strip()

        pkgs = []
        for i, line in enumerate(out):
            if not line.startswith('Name'):
                continue

            name = procline(line)
            if name in self.exclude:
                continue
            version = procline(out[i + 1])
            comment = procline(out[i + 2])
            if optional:
                for line2 in out[i:]:
                    if line2.startswith('Optional For'):
                        opt = procline(line2)
                        if opt != 'None':
                            comment += ' (optionally for: {})'.format(opt)
                        break
            pkgs.append([name, '{} {}'.format(name, version), comment])
        return pkgs


# class FreeBSD(System):
#     """ FreeBSD; the so-called 'pkg-ng' tools """
#     name = 'freebsd'
#
#     def list_leafs(self):
#         """ Example output:
#         0 chicken 4.9.0.1_1 Scheme-to-C compiler
#         [...]
#         """
#         # %?r returns 0 if the list is empty and 1 if the list has information
#         #    for reverse dependencies
#         # %n  Name of the package
#         # %v  Version of the matched package
#         # %c  Comment of the matched package
#
#         out = self.run(['pkg', 'query', '-a', '%?r %n %v %c']).strip()
#         out = [o[1:].strip() for o in out.split('\n') if o[0] == '0']
#
#         pkgs = []
#         for line in out:
#             line = line.split(' ')
#             pkgs.append([line[0], '{} {}'.format(line[0], line[1]), ' '.join(line[2:])])
#
#         return pkgs
#
#     def remove(self, pkgname):
#         self.run(['pkg', 'remove', pkgname])


# class Rpm(System):
#     """ RedHat and derivatives (CentOS, Fedora, SUSE, many more) """
#     name = 'rpm'
#
#     def list_leafs(self):
#         """
#         RPM packages list a number of "capabilities", and may require a number
#         of "capabilities"; for example, there is usually no dependency on
#         'glibc', but a dependency on the capability 'libc.so.6', which 'glibc'
#         provides.
#         This is rather flexible, but also makes this function rather large :-/ I
#         guess this is why you have 8 different front-ends for RPM...
#         """
#
#         pkgs = self.run(['rpm', '--query', '--all', '--queryformat', '%{name} %{version} %{summary}\n']).strip()
#         pkgs = [[o[0], '{} {}'.format(o[0], o[1]), ' '.join(o[1:])] for o in [p.split(' ') for p in pkgs]]
#         requires_cache = {}
#         leaf_pkgs = []
#         for p in pkgs:
#             requires = self.run(['rpm', '--query', '--whatrequires', p[0]]).split('\n')
#             # Output is like:
#             #   no package requires sudo
#             # or:
#             #   initscripts-9.03.40-2.el6.centos.x86_64
#             #   dracut-004-335.el6.noarch
#             #
#             # But this may differ per version, and is dependent on locale
#             # settings... So we use this check:
#             if len(requires) == 1 and requires[0].trim().endswith(p[0]):
#                 leaf_pkgs.append(p)
#
#         return leaf_pkgs
#
#     def remove(self, pkgname):
#         self.run(['yum', 'remove', '-y', pkgname])


# class Dpkg(System):
#     """ Debian and derivatives (Ubuntu, many more) """
#     name = 'dpkg'
#
#     def list_leafs(self):
#         """
#         """
#
#         leaf_pkgs = []
#         pkgs = self.run(['dpkg-query', '--list']).strip().split('\n')
#         pkgs = pkgs[5:]
#         for p in pkgs:
#             if not p.startswith('ii'):
#                 continue
#             p = p[4:]
#             p = filter(len, p.split(' '))
#             p = [p[0], p[0], ' '.join(p[3:])]
#             # [pkg_name, display_pkg_name, comment],
#             # TODO: We can use apt-cache rdepends .* to get a list of all
#             # packages. Lots faster!
#             requires = self.run(['apt-cache', 'rdepends', '--installed',
#                                  '--no-conflicts', '--no-breaks',
#                                  '--no-replaces', p[0]]).strip().split('\n')
#             if len(requires) == 2:
#                 leaf_pkgs.append(p)
#
#         return leaf_pkgs
#
#     def remove(self, pkgname):
#         self.run(['apt-get', 'remove', '-y', pkgname])


def detect_system():
    """ Try and detect the package system we're using; uses platform information
        first, and falls back to detecting the existinse of binaries (eg dpkg,
        pacman, etc) if that fails """

    dist = distro.id()
    if dist == 'arch':
        return Pacman()
    elif dist == 'void':
        return Xbps()
    # elif dist == 'freebsd':
    #     return FreeBSD()
    # elif dist in ['debian', 'ubuntu']:
    #     return Dpkg()
    # elif dist in ['redhat', 'centos', 'fedora']:
    #     return Rpm()

    # There are so many distros; just a double check.
    if in_path('pacman'):
        return Pacman()
    elif in_path('xbps-query'):
        return Xbps()
    # elif in_path('dpkg'):
    #     return Dpkg()
    # elif in_path('rpm'):
    #     return Rpm()

    print("I'm sorry, but looks like your system isn't supported :-(")
    print(
        "It's also possible your system isn't detected properly; use `{} -P'".format(sys.argv[0]))
    print(
        "to get a list of supported platforms; you can use `{} -p platform_name'".format(sys.argv[0]))
    print("to select one manually.")
    print('')
    print("Please email me at martin@arp242.net! If you provide some example outputs then")
    print("I'm sure we can fix this ;-)")
    sys.exit(2)


def in_path(util):
    """ Check if the commandline tool +util+ is in PATH and executable """

    return subprocess.run(['hash', util], shell=True,
                           stdout=subprocess.PIPE,
                           stderr=subprocess.PIPE) == 0


def get_editor():
    """ Get the editor to use from EDITOR; fall back to vi.
    TODO: maybe also try xdg-open? """

    editor = os.getenv('EDITOR')
    if editor in [None, '']:
        for editor in ['vim', 'vi', 'nano', 'ee', 'emacs']:
            if in_path(editor):
                break
        else:
            print("Can't find an editor; set your EDITOR")
            sys.exit(1)
    return editor


def run_editor(pkgs):
    """ Write +pkgs+ to a temp file, run the editor. Returns a list with
    packages *not* to be removed. """

    maxlen = max([len(p[1]) for p in pkgs])
    pkgs_fmt = ['{}{}{}'.format(
        p[1], ' ' * (maxlen - len(p[1]) + 2), p[2]) for p in pkgs]

    with tempfile.NamedTemporaryFile('w+', prefix='pkg-cutleaves-') as fp:
        fp.write(
            '# Delete or comment out the lines whose packages you want removed.\n')
        fp.write('# Simply save and quit when you\'re done.\n')
        fp.write('\n'.join(pkgs_fmt))
        fp.flush()
        subprocess.call([get_editor(), fp.name])

        # We re-open the path, since some editors (Vim) may have written a
        # different file (inode-wise) to the same pathname
        with open(fp.name, 'r') as rfp:
            return [l.strip() for l in rfp.readlines() if not l.startswith('#')]


def ask_and_remove(pkgs, leave_installed):
    """ Show packages to-be-removed, ask for confirmation, and remove """

    # Remove comment part
    li = [l.split('  ')[0] for l in leave_installed]

    remove = []
    [remove.append(p[0]) for p in pkgs if p[1] not in li]
    if len(remove) == 0:
        print('Nothing to be removed')
        sys.exit(0)

    print()
    for r in remove:
        print(' ', r)
    print()

    answer = ask('Remove packages [Y/n]? ')
    if answer in ['', 'y', 'Y', 'yes', 'YES']:
        l = len(remove)
        for i, r in enumerate(remove):
            name = r.split(' ')[0]
            print('[{}/{}] Removing {} '.format(i + 1, l, name), end='')
            sys.stdout.flush()
            system.remove(name)
            print(' done')
    else:
        answer = ask('Do you want to edit the same list again? [Y/n]? ')
        if answer in ['', 'y', 'Y', 'yes', 'YES']:
            leave_installed = run_editor(pkgs)
            return ask_and_remove(pkgs, leave_installed)
        else:
            print('Okay, bailing out!')
            sys.exit(0)


def ask(prompt):
    try:
        return input(prompt)
    # Allow ^C without an exception
    except KeyboardInterrupt:
        print('')
        sys.exit(0)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Remove "leaf" packages: packages that no other package'
                    ' depends on.')

    parser.add_argument('-v', '--version', action='store_true',
                        help='show version and exit')
    parser.add_argument('-P', '--list-platforms', action='store_true',
                        help='list all supported platforms')
    parser.add_argument('-p', '--platform', default=None,
                        help='set platform (default is to autodetect)')
    parser.add_argument('-x', '--exclude',
                        help='set exclude file; defaults to pkg_leaves.exclude'
                             ' in the usual directories (including cwd). Use'
                             ' -x NONE to *NOT* use the exclude file')
    parser.add_argument('-l', '--list', action='store_true',
                        help="list leaf packages, but don't do anything else"
                             " (useful for making the exclude file)")
    parser.add_argument('-o', '--optional', action='store_true',
                        help="also include packages that are optionally required")
    args = vars(parser.parse_args())

    if args['version']:
        print("pkg_clearleaves by Martin Tournoij <martin@arp242.net>")
        print("https://github.com/arp242/pkg_clearleaves")
        sys.exit(0)

    if args['list_platforms']:
        names = [p.name for p in System.__subclasses__()]
        names.sort()
        print('\n'.join(names))
        sys.exit(0)

    if args['platform']:
        for system in System.__subclasses__():
            if system.name == args['platform'].lower():
                system = system()
                break
        else:
            print("The platform `{}' is unknown; you can use `{} -P' to get a list".format(
                args['platform'], sys.argv[0]))
            sys.exit(3)
    else:
        system = detect_system()

    system.load_exclude(args['exclude'])

    seen = []
    pkgs = [p for p in system.list_leafs(args['optional']) if p[0] not in seen]
    pkgs = [[re.sub(' +', ' ', e) for e in p] for p in pkgs]

    if args['list']:
        print('\n'.join([p[0] for p in pkgs]))
        sys.exit(0)

    if os.getuid() != 0:
        print('We need root privileges to remove packages')
        sys.exit(1)

    while True:
        seen += [p[0] for p in pkgs]
        if len(pkgs) == 0:
            print('No leaf packages ({} excluded).'.format(len(system.exclude)))
            sys.exit(0)
        leave_installed = run_editor(pkgs)
        ask_and_remove(pkgs, leave_installed)

        pkgs = [p for p in system.list_leafs(args['optional']) if p[0] not in seen]
        pkgs = [[re.sub(' +', ' ', e) for e in p] for p in pkgs]
        if len(pkgs) == 0:
            print('\nAll done')
            break
        answer = ask('Do you want to list new leaf packages [Y/n]? ')
        if answer not in ['', 'y', 'Y', 'yes', 'YES']:
            break


# The MIT License (MIT)
#
# Copyright Â© 2015-2019 Martin Tournoij
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the âSoftwareâ), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# The software is provided "as is", without warranty of any kind, express or
# implied, including but not limited to the warranties of merchantability,
# fitness for a particular purpose and noninfringement. In no event shall the
# authors or copyright holders be liable for any claim, damages or other
# liability, whether in an action of contract, tort or otherwise, arising
# from, out of or in connection with the software or the use or other dealings
# in the software.

